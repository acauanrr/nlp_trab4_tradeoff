[
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "predicted_sql": "SELECT COUNT(*) \nFROM singer;",
        "ground_truth_sql": "SELECT count(*) FROM singer"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "predicted_sql": "The total number of singers can be obtained by counting the number of unique Singer_IDs in the singer table.\n\n### SQL\nSELECT COUNT(DISTINCT Singer_ID) AS Total_Singers\nFROM singer",
        "ground_truth_sql": "SELECT count(*) FROM singer"
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "predicted_sql": "SELECT S.Name, S.Country, S.Age\nFROM singer AS S\nORDER BY S.Age DESC;",
        "ground_truth_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "predicted_sql": "SELECT AVG(S.Age) AS Average_Age, MIN(S.Age) AS Minimum_Age, MAX(S.Age) AS Maximum_Age\nFROM singer S\nWHERE S.Country = 'France'",
        "ground_truth_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "predicted_sql": "To answer this question, we need to join the singer table with itself and filter the results to only include French singers, and then calculate the average, minimum, and maximum age.\n\nHere is the SQL query:\n\n```\nSELECT AVG(t2.Age) AS Average_Age, \n       MIN(t2.Age) AS Minimum_Age, \n       MAX(t2.Age) AS Maximum_Age\nFROM singer AS t1\nJOIN singer AS t2 ON t1.Singer_ID = t2.Singer_ID\nWHERE t1.Country = 'France'",
        "ground_truth_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted_sql": "SELECT s.Name, s.Song_release_year\nFROM singer AS s\nJOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert AS c ON sic.concert_ID = c.concert_ID\nORDER BY s.Age\nLIMIT 1;",
        "ground_truth_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "predicted_sql": "```\nSELECT S.Name, S.Song_Name, S.Song_release_year\nFROM singer AS S\nJOIN singer_in_concert AS SC ON S.Singer_ID = SC.Singer_ID\nWHERE S.Age = (SELECT MIN(Age) FROM singer)\n```\n\nThis query first joins the `singer` table with the `singer_in_concert` table on the `Singer_ID` column. Then, it selects the rows from the `singer` table where the `Age` is the minimum age in the `singer` table (i.e., the youngest singer). Finally, it selects the `Name`, `Song_Name`, and `Song_release_year` columns from the resulting rows.",
        "ground_truth_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted_sql": "Here are the SQL queries for each question:\n\n1. Who performed the song named \"Le Pop\"?\n\n```\nSELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"\n```\n\n2. Tell me the types of the policy used by the customer named \"Dayana Robel\".\n\n```\nSELECT DISTINCT t3.policy_type_code \nFROM customers AS t1 \nJOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id \nJOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id \nWHERE t1.customer_name  =  \"Dayana Robel\"\n```\n\n3. What are the different ids and names of the stations that have had more than 12 bikes available?\n\n```\nSELECT DISTINCT T1.id,  T1.name \nFROM station AS T1 \nJOIN status AS T2 ON T1.id  =  T2.station_id \nWHERE T2.bikes_available  >  12\n```\n\n4. What are",
        "ground_truth_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "predicted_sql": "To answer this question, you need to join the `singer` table with the `singer_in_concert` table to get the singers who have performed in concerts, and then join the result with the `stadium` table to get the countries where these singers are from. Finally, you can filter the result to only include singers above age 20.\n\nHere is the SQL query:\n```\nSELECT DISTINCT T2.Country\nFROM singer AS T1\nJOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.concert_ID\nJOIN stadium AS T3 ON T2.concert_ID = T3.Stadium_ID\nWHERE T1.Age > 20",
        "ground_truth_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "predicted_sql": "SELECT DISTINCT singer.Country, COUNT(singer.Country) AS Num_Singers\nFROM singer\nGROUP BY singer.Country;",
        "ground_truth_sql": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "predicted_sql": "SELECT DISTINCT t2.country, COUNT(t2.Singer_ID) AS count_singers\nFROM singer AS t1 JOIN singer AS t2 ON t1.country = t2.country\nGROUP BY t2.country",
        "ground_truth_sql": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "predicted_sql": "SELECT s.song_name\nFROM singer s\nJOIN singer_in_concert sc ON s.singer_ID = sc.singer_ID\nWHERE s.Age > (SELECT AVG(Age) FROM singer);",
        "ground_truth_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "predicted_sql": "WITH avg_age AS (\n  SELECT AVG(Age) AS avg_age\n  FROM singer\n)\nSELECT S.Name, S.Song_Name\nFROM singer S\nJOIN avg_age A ON S.Age > A.avg_age\nJOIN singer_in_concert SC ON S.Singer_ID = SC.Singer_ID\nJOIN concert C ON SC.concert_ID = C.concert_ID\nORDER BY S.Name, S.Song_Name;",
        "ground_truth_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "predicted_sql": "Here are the SQL queries for each question:\n\n### Question 1\n```\nSELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"\n```\n\n### Question 2\n```\nSELECT DISTINCT t3.policy_type_code \nFROM customers AS t1 \nJOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id \nJOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id \nWHERE t1.customer_name  =  \"Dayana Robel\"\n```\n\n### Question 3\n```\nSELECT DISTINCT T1.id,  T1.name \nFROM station AS T1 \nJOIN status AS T2 ON T1.id  =  T2.station_id \nWHERE T2.bikes_available  >  12\n```\n\n### Question 4\n```\nSELECT T1.Location,  T1.Name \nFROM stadium AS T1 \nWHERE T1.Capacity BETWEEN 5000 AND 10000\n```\n\nLet me know",
        "ground_truth_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "predicted_sql": "SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity BETWEEN 5000 AND 10000",
        "ground_truth_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted_sql": "SELECT MAX(Capacity), AVG(Capacity) \nFROM stadium",
        "ground_truth_sql": "select max(capacity), average from stadium"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "predicted_sql": "Here are the SQL queries to answer the questions:\n\n### Question 1\nWhat is the average and maximum capacities for all stadiums?\n\n### SQL\nSELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Max_Capacity FROM stadium",
        "ground_truth_sql": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted_sql": "To answer this question, we need to join the `stadium` table with the `concert` table and calculate the average attendance for each stadium. Then, we can select the stadium with the highest average attendance.\n\nHere is the SQL query:\n```\nSELECT s.Name, s.Capacity\nFROM stadium s\nJOIN (\n  SELECT Stadium_ID, AVG(Average) AS Average_Attendance\n  FROM concert\n  GROUP BY Stadium_ID\n) AS c\nON s.Stadium_ID = c.Stadium_ID\nORDER BY c.Average_Attendance DESC\nLIMIT 1",
        "ground_truth_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted_sql": "SELECT S.Name, S.Capacity\nFROM stadium S\nORDER BY S.Average DESC\nLIMIT 1;",
        "ground_truth_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    }
]