[
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "predicted_sql": "SELECT COUNT(*) \nFROM singer;",
        "ground_truth_sql": "SELECT count(*) FROM singer"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "predicted_sql": "SELECT COUNT(*) FROM singer",
        "ground_truth_sql": "SELECT count(*) FROM singer"
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "predicted_sql": "SELECT DISTINCT t2.country\nFROM singer AS t1\nJOIN singer_in_concert AS t2 ON t1.Singer_ID = t2.Singer_ID\nWHERE t1.Age > 20;",
        "ground_truth_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "predicted_sql": "SELECT \n  s.Country, \n  COUNT(s.Singer_ID) AS Total_Singers\nFROM \n  singer s\nGROUP BY \n  s.Country;",
        "ground_truth_sql": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "predicted_sql": "SELECT S2.Name, S1.Song_Name\nFROM singer AS S1\nJOIN singer_in_concert AS S2 ON S1.Singer_ID = S2.Singer_ID\nWHERE S1.Age > (SELECT AVG(Age) FROM singer)\nORDER BY S1.Song_Name;",
        "ground_truth_sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "predicted_sql": "SELECT T1.Location, T1.Name\nFROM stadium AS T1\nWHERE T1.Capacity BETWEEN 5000 AND 10000;",
        "ground_truth_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select max(capacity), average from stadium"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "predicted_sql": "SELECT AVG(T1.capacity) AS average_capacity, MAX(T1.capacity) AS max_capacity FROM stadium AS T1",
        "ground_truth_sql": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "predicted_sql": "SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015')",
        "ground_truth_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "db_id": "concert_singer",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    {
        "db_id": "concert_singer",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "db_id": "concert_singer",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted_sql": "SELECT DISTINCT s.Location, s.Name\nFROM stadium s\nWHERE EXISTS (\n  SELECT 1\n  FROM concert c1\n  WHERE c1.Stadium_ID = s.Stadium_ID AND c1.Year = 2014\n)\nAND EXISTS (\n  SELECT 1\n  FROM concert c2\n  WHERE c2.Stadium_ID = s.Stadium_ID AND c2.Year = 2015\n);",
        "ground_truth_sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?",
        "predicted_sql": "SELECT P.weight\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.StuID = P.PetID\nWHERE P.pet_age = (SELECT MIN(Pet_age) FROM Pets);",
        "ground_truth_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of distinct type of pets.",
        "predicted_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "ground_truth_sql": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "predicted_sql": "SELECT COUNT(DISTINCT PetType) FROM Pets",
        "ground_truth_sql": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name of students who have cat or dog pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "db_id": "pets_1",
        "question": "Find the average and maximum age for each type of pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "db_id": "pets_1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "db_id": "car_1",
        "question": "How many continents are there?",
        "predicted_sql": "SELECT COUNT(*) FROM continents",
        "ground_truth_sql": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "predicted_sql": "### ANSWER\n\nThe number of continents is 1.\n\n### SQL\nSELECT COUNT(*) FROM continents",
        "ground_truth_sql": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "db_id": "car_1",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "predicted_sql": "SELECT COUNT(DISTINCT countries.CountryId) FROM countries",
        "ground_truth_sql": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "db_id": "car_1",
        "question": "How many countries exist?",
        "predicted_sql": "SELECT COUNT(*) FROM countries",
        "ground_truth_sql": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted_sql": "SELECT c.Model, cd.Weight\nFROM cars_data cd\nJOIN car_names cn ON cd.Id = cn.MakeId\nJOIN model_list ml ON cn.MakeId = ml.ModelId\nWHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);",
        "ground_truth_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted_sql": "SELECT \n  c.Model, \n  AVG(c.Weight) AS avg_weight\nFROM \n  cars_data c\nGROUP BY \n  c.Model\nHAVING \n  AVG(c.Weight) < (SELECT AVG(Weight) FROM cars_data)",
        "ground_truth_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted_sql": "SELECT c.Maker, c.Year\nFROM cars_data c\nWHERE c.Year = (SELECT MIN(Year) FROM cars_data)",
        "ground_truth_sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "db_id": "car_1",
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "car_1",
        "question": "What is the name of the country with the most car makers?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname \nFROM Performance AS T1 \nJOIN Band AS T2 ON T1.bandmate  =  T2.id \nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId \nWHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
    },
    {
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    {
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "ground_truth_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "predicted_sql": "SELECT COUNT(*)\nFROM car_makers\nWHERE Country = 'France';",
        "ground_truth_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "predicted_sql": "SELECT COUNT(DISTINCT car_makers.Country) AS num_makers\nFROM car_makers\nJOIN countries ON car_makers.Country = countries.CountryName\nWHERE countries.Continent = 'Europe' AND countries.CountryName = 'France';",
        "ground_truth_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "predicted_sql": "SELECT COUNT(*) \nFROM car_makers AS T1 \nJOIN model_list AS T2 ON T1.Id = T2.Maker \nJOIN cars_data AS T3 ON T2.ModelId = T3.Id \nWHERE T1.Country = 'USA';",
        "ground_truth_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "predicted_sql": "To answer the question, we need to join the `car_makers` table with the `countries` table to get the country information for each car maker, and then join the `model_list` table with the `car_names` table to get the model information. Finally, we filter the results to only include car makers from the United States.\n\nHere is the SQL query:\n```\nSELECT COUNT(*)\nFROM car_makers AS cm\nJOIN countries AS c ON cm.Country = c.CountryId\nJOIN model_list AS ml ON cm.Id = ml.Maker\nJOIN car_names AS cn ON ml.ModelId = cn.MakeId\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'United States')",
        "ground_truth_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "predicted_sql": "SELECT T2.firstname,  T2.lastname\nFROM Performance AS T1\nJOIN Band AS T2 ON T1.bandmate  =  T2.id\nJOIN Songs AS T3 ON T3.SongId  =  T1.SongId\nWHERE T3.Title  =  \"Le Pop\";",
        "ground_truth_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    }
]